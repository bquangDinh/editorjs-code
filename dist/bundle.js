!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.CodeTool=n():e.CodeTool=n()}(self,(()=>(()=>{var e={192:(e,n,t)=>{"use strict";t.d(n,{Z:()=>r});var a=t(537),o=t.n(a),l=t(645),i=t.n(l)()(o());i.push([e.id,"@import url(https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css);"]),i.push([e.id,".editorjs-code-block{box-sizing:border-box;width:100%;position:relative}.editorjs-code-block *{box-sizing:border-box}.editorjs-code-block .control-container{padding:10px;padding-bottom:0;display:flex;justify-content:space-between;background-color:#f3f3f3;border-radius:5px 5px 0 0}.editorjs-code-block .control-container .editorjs-code-language-select{position:relative}.editorjs-code-block .control-container .editorjs-code-language-select *{font-size:12px;font-family:Arial,Helvetica,sans-serif}.editorjs-code-block .control-container .editorjs-code-language-select select{display:none}.editorjs-code-block .control-container .editorjs-code-language-select .select-selected{background-color:rgba(0,0,0,0);padding:5px 20px 5px 10px;transition:background-color .2s;width:fit-content;border-radius:5px;cursor:pointer;position:relative}.editorjs-code-block .control-container .editorjs-code-language-select .select-selected:hover{background-color:rgba(0,0,0,.5)}.editorjs-code-block .control-container .editorjs-code-language-select .select-selected .arrow-icon{position:absolute;width:10px;height:10px;right:5px;top:6px;transition:transform .2s}.editorjs-code-block .control-container .editorjs-code-language-select .select-selected.select-arrow-active .arrow-icon{transform:rotateZ(180deg)}.editorjs-code-block .control-container .editorjs-code-language-select .select-items{padding:5px;height:auto;background-color:#292929;width:fit-content;border-radius:5px;margin-top:5px;position:absolute;z-index:5}.editorjs-code-block .control-container .editorjs-code-language-select .select-items .search-input{margin:5px;padding:5px;background-color:#5c5c5c;border:0;outline:0;border-radius:2px;color:#fff}.editorjs-code-block .control-container .editorjs-code-language-select .select-items .items-list{max-height:300px;overflow-y:auto}.editorjs-code-block .control-container .editorjs-code-language-select .select-items .items-list div{color:#fff;cursor:pointer;padding:5px 10px 5px 10px;margin:5px 0 5px 0;border-radius:5px;background-color:#292929;transition:background-color .2s}.editorjs-code-block .control-container .editorjs-code-language-select .select-items .items-list .same-as-selected,.editorjs-code-block .control-container .editorjs-code-language-select .select-items .items-list div:hover{background-color:#434343}.editorjs-code-block .control-container .editorjs-code-language-select .select-hide{display:none}.editorjs-code-block .control-container .language{font-size:12px;font-family:Arial,Helvetica,sans-serif;margin:5px}.editorjs-code-block .control-container .btn-div .control-btn{padding:5px 10px 5px 10px;border:1px solid #000;cursor:pointer;font-size:12px}.editorjs-code-block .control-container .btn-div .control-btn:hover{background-color:rgba(46,46,46,.2)}.editorjs-code-block .control-container .btn-div .copy-btn{border-radius:5px 0 0 5px}.editorjs-code-block .control-container .btn-div .copy-btn .copy-icon{width:10px;height:10px}.editorjs-code-block .control-container .btn-div .copy-btn.copy-btn-only{border-radius:5px}.editorjs-code-block .control-container .btn-div .caption-btn{border-radius:0 5px 5px 0;border-left:0}.editorjs-code-block .content-container{position:relative;background-color:#f3f3f3;border-radius:0 0 5px 5px}.editorjs-code-block .content-container .rendered-layer{position:absolute;z-index:0;top:0;left:0;right:0;bottom:0;border:0}.editorjs-code-block .content-container .rendered-layer pre{margin:0;white-space:pre-wrap;word-wrap:break-word}.editorjs-code-block .content-container .rendered-layer pre code{font-size:14px;padding:20px;padding-top:5px;border-radius:5px 5px 0 0;line-height:2}.editorjs-code-block .content-container .input-layer{position:relative;z-index:1;color:rgba(0,0,0,0);background:rgba(0,0,0,0);caret-color:#000;border:0;padding:20px;padding-top:5px;width:100%;resize:none;overflow:hidden;min-height:150px;outline:0}.editorjs-code-block .content-container .input-layer::selection{background-color:rgba(212,236,255,.5)}.editorjs-code-block .content-container .input-layer::-moz-selection{background-color:rgba(212,236,255,.5)}.editorjs-code-block .content-container .input-layer,.editorjs-code-block .content-container .rendered-layer,.editorjs-code-block .content-container .rendered-layer *{font-size:14px;font-family:monospace;tab-size:2;line-height:2}.editorjs-code-block .caption-input{border:0;outline:0;margin-top:5px;width:100%;color:gray;background-color:rgba(0,0,0,0)}","",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAEA,qBACE,qBAAA,CAMA,UAAA,CACA,iBAAA,CALA,uBACE,qBAAA,CAMF,wCACE,YAAA,CACA,gBAAA,CACA,YAAA,CACA,6BAAA,CACA,wBAAA,CACA,yBAAA,CAEA,uEACE,iBAAA,CAEA,yEACE,cAAA,CACA,sCAAA,CAGF,8EACE,YAAA,CAGF,wFACE,8BAAA,CACA,yBAAA,CACA,+BAAA,CACA,iBAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CAEA,8FACE,+BAAA,CAGF,oGACE,iBAAA,CACA,UAAA,CACA,WAAA,CACA,SAAA,CACA,OAAA,CACA,wBAAA,CAIA,wHACE,yBAAA,CAKN,qFACE,WAAA,CACA,WAAA,CACA,wBAAA,CACA,iBAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,SAAA,CAEA,mGACI,UAAA,CACA,WAAA,CACA,wBAAA,CACA,QAAA,CACA,SAAA,CACA,iBAAA,CACA,UAAA,CAGJ,iGACE,gBAAA,CACA,eAAA,CAEA,qGACE,UAAA,CACA,cAAA,CACA,yBAAA,CACA,kBAAA,CACA,iBAAA,CACA,wBAAA,CACA,+BAAA,CAGF,8NAEE,wBAAA,CAKN,oFACE,YAAA,CAIJ,kDACI,cAAA,CACA,sCAAA,CACA,UAAA,CAIF,8DACE,yBAAA,CACA,qBAAA,CACA,cAAA,CACA,cAAA,CAEA,oEACE,kCAAA,CAIJ,2DACE,yBAAA,CAEA,sEACE,UAAA,CACA,WAAA,CAGF,yEACI,iBAAA,CAIN,8DACE,yBAAA,CACA,aAAA,CAKN,wCACE,iBAAA,CACA,wBAAA,CACA,yBAAA,CAEA,wDACE,iBAAA,CACA,SAAA,CACA,KAAA,CACA,MAAA,CACA,OAAA,CACA,QAAA,CACA,QAAA,CAEA,4DACE,QAAA,CACA,oBAAA,CACA,oBAAA,CAEA,iEACE,cAAA,CACA,YAAA,CACA,eAAA,CACA,yBAAA,CACA,aAAA,CAKN,qDACE,iBAAA,CACA,SAAA,CAEA,mBAAA,CACA,wBAAA,CACA,gBAAA,CACA,QAAA,CAEA,YAAA,CACA,eAAA,CAEA,UAAA,CAEA,WAAA,CACA,eAAA,CACA,gBAAA,CAEA,SAAA,CAEA,gEACE,qCAAA,CAGF,qEACE,qCAAA,CAIJ,uKAGE,cAAA,CACA,qBAAA,CACA,UAAA,CACA,aAAA,CAIJ,oCACE,QAAA,CACA,SAAA,CACA,cAAA,CACA,UAAA,CACA,UAAA,CACA,8BAAA",sourcesContent:['@import url("https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css");\n\n.editorjs-code-block {\n  box-sizing: border-box;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  width: 100%;\n  position: relative;\n\n  .control-container {\n    padding: 10px;\n    padding-bottom: 0;\n    display: flex;\n    justify-content: space-between;\n    background-color: #f3f3f3;\n    border-radius: 5px 5px 0 0;\n\n    .editorjs-code-language-select {\n      position: relative;\n\n      & * {\n        font-size: 12px;\n        font-family: Arial, Helvetica, sans-serif;\n      }\n\n      select {\n        display: none;\n      }\n\n      .select-selected {\n        background-color: transparent;\n        padding: 5px 20px 5px 10px;\n        transition: background-color 0.2s;\n        width: fit-content;\n        border-radius: 5px;\n        cursor: pointer;\n        position: relative;\n\n        &:hover {\n          background-color: rgba($color: #000000, $alpha: 0.5);\n        }\n\n        .arrow-icon {\n          position: absolute;\n          width: 10px;\n          height: 10px;\n          right: 5px;\n          top: 6px;\n          transition: transform 0.2s;\n        }\n\n        &.select-arrow-active {\n          .arrow-icon {\n            transform: rotateZ(180deg);\n          }\n        }\n      }\n\n      .select-items {\n        padding: 5px;\n        height: auto;\n        background-color: #292929;\n        width: fit-content;\n        border-radius: 5px;\n        margin-top: 5px;\n        position: absolute;\n        z-index: 5;\n\n        .search-input {\n            margin: 5px;\n            padding: 5px;\n            background-color: lighten($color: #292929, $amount: 20%);\n            border: 0;\n            outline: 0;\n            border-radius: 2px;\n            color: white;\n        }\n\n        .items-list {\n          max-height: 300px;\n          overflow-y: auto;\n\n          div {\n            color: white;\n            cursor: pointer;\n            padding: 5px 10px 5px 10px;\n            margin: 5px 0 5px 0;\n            border-radius: 5px;\n            background-color: #292929;\n            transition: background-color 0.2s;\n          }\n\n          .same-as-selected,\n          div:hover {\n            background-color: lighten(#292929, 10%);\n          }\n        }\n      }\n\n      .select-hide {\n        display: none;\n      }\n    }\n\n    .language {\n        font-size: 12px;\n        font-family: Arial, Helvetica, sans-serif;\n        margin: 5px\n    }\n\n    .btn-div {\n      .control-btn {\n        padding: 5px 10px 5px 10px;\n        border: 1px solid black;\n        cursor: pointer;\n        font-size: 12px;\n\n        &:hover {\n          background-color: rgba(46, 46, 46, 0.2);\n        }\n      }\n\n      .copy-btn {\n        border-radius: 5px 0 0 5px;\n\n        .copy-icon {\n          width: 10px;\n          height: 10px;\n        }\n\n        &.copy-btn-only {\n            border-radius: 5px;\n        }\n      }\n\n      .caption-btn {\n        border-radius: 0 5px 5px 0;\n        border-left: 0;\n      }\n    }\n  }\n\n  .content-container {\n    position: relative;\n    background-color: #f3f3f3;\n    border-radius: 0 0 5px 5px;\n\n    .rendered-layer {\n      position: absolute;\n      z-index: 0;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      border: 0;\n\n      pre {\n        margin: 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n\n        code {\n          font-size: 14px;\n          padding: 20px;\n          padding-top: 5px;\n          border-radius: 5px 5px 0 0;\n          line-height: 2;\n        }\n      }\n    }\n\n    .input-layer {\n      position: relative;\n      z-index: 1;\n\n      color: transparent;\n      background: transparent;\n      caret-color: black;\n      border: 0;\n\n      padding: 20px;\n      padding-top: 5px;\n\n      width: 100%;\n\n      resize: none;\n      overflow: hidden;\n      min-height: 150px;\n\n      outline: 0;\n\n      &::selection {\n        background-color: rgba(212, 236, 255, 0.5);\n      }\n\n      &::-moz-selection {\n        background-color: rgba(212, 236, 255, 0.5);\n      }\n    }\n\n    .input-layer,\n    .rendered-layer,\n    .rendered-layer * {\n      font-size: 14px;\n      font-family: monospace;\n      tab-size: 2;\n      line-height: 2;\n    }\n  }\n\n  .caption-input {\n    border: 0;\n    outline: 0;\n    margin-top: 5px;\n    width: 100%;\n    color: gray;\n    background-color: transparent;\n  }\n}\n'],sourceRoot:""}]);const r=i},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",a=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),a&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),a&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,a,o,l){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(a)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(i[s]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);a&&i[u[0]]||(void 0!==l&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=l),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),n.push(u))}},n}},537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),l="/*# ".concat(o," */");return[n].concat([l]).join("\n")}return[n].join("\n")}},379:e=>{"use strict";var n=[];function t(e){for(var t=-1,a=0;a<n.length;a++)if(n[a].identifier===e){t=a;break}return t}function a(e,a){for(var l={},i=[],r=0;r<e.length;r++){var s=e[r],c=a.base?s[0]+a.base:s[0],u=l[c]||0,d="".concat(c," ").concat(u);l[c]=u+1;var p=t(d),g={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(g);else{var h=o(g,a);a.byIndex=r,n.splice(r,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var l=a(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<l.length;i++){var r=t(l[i]);n[r].references--}for(var s=a(e,o),c=0;c<l.length;c++){var u=t(l[c]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}l=s}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var a=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,o&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var l=t.sourceMap;l&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),n.styleTagTransform(a,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},390:e=>{var n={exports:{}};function t(e){return e instanceof Map?e.clear=e.delete=e.set=function(){throw new Error("map is read-only")}:e instanceof Set&&(e.add=e.clear=e.delete=function(){throw new Error("set is read-only")}),Object.freeze(e),Object.getOwnPropertyNames(e).forEach((function(n){var a=e[n];"object"!=typeof a||Object.isFrozen(a)||t(a)})),e}n.exports=t,n.exports.default=t;class a{constructor(e){void 0===e.data&&(e.data={}),this.data=e.data,this.isMatchIgnored=!1}ignoreMatch(){this.isMatchIgnored=!0}}function o(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")}function l(e,...n){const t=Object.create(null);for(const n in e)t[n]=e[n];return n.forEach((function(e){for(const n in e)t[n]=e[n]})),t}const i=e=>!!e.scope||e.sublanguage&&e.language;class r{constructor(e,n){this.buffer="",this.classPrefix=n.classPrefix,e.walk(this)}addText(e){this.buffer+=o(e)}openNode(e){if(!i(e))return;let n="";n=e.sublanguage?`language-${e.language}`:((e,{prefix:n})=>{if(e.includes(".")){const t=e.split(".");return[`${n}${t.shift()}`,...t.map(((e,n)=>`${e}${"_".repeat(n+1)}`))].join(" ")}return`${n}${e}`})(e.scope,{prefix:this.classPrefix}),this.span(n)}closeNode(e){i(e)&&(this.buffer+="</span>")}value(){return this.buffer}span(e){this.buffer+=`<span class="${e}">`}}const s=(e={})=>{const n={children:[]};return Object.assign(n,e),n};class c{constructor(){this.rootNode=s(),this.stack=[this.rootNode]}get top(){return this.stack[this.stack.length-1]}get root(){return this.rootNode}add(e){this.top.children.push(e)}openNode(e){const n=s({scope:e});this.add(n),this.stack.push(n)}closeNode(){if(this.stack.length>1)return this.stack.pop()}closeAllNodes(){for(;this.closeNode(););}toJSON(){return JSON.stringify(this.rootNode,null,4)}walk(e){return this.constructor._walk(e,this.rootNode)}static _walk(e,n){return"string"==typeof n?e.addText(n):n.children&&(e.openNode(n),n.children.forEach((n=>this._walk(e,n))),e.closeNode(n)),e}static _collapse(e){"string"!=typeof e&&e.children&&(e.children.every((e=>"string"==typeof e))?e.children=[e.children.join("")]:e.children.forEach((e=>{c._collapse(e)})))}}class u extends c{constructor(e){super(),this.options=e}addKeyword(e,n){""!==e&&(this.openNode(n),this.addText(e),this.closeNode())}addText(e){""!==e&&this.add(e)}addSublanguage(e,n){const t=e.root;t.sublanguage=!0,t.language=n,this.add(t)}toHTML(){return new r(this,this.options).value()}finalize(){return!0}}function d(e){return e?"string"==typeof e?e:e.source:null}function p(e){return b("(?=",e,")")}function g(e){return b("(?:",e,")*")}function h(e){return b("(?:",e,")?")}function b(...e){return e.map((e=>d(e))).join("")}function A(...e){const n=function(e){const n=e[e.length-1];return"object"==typeof n&&n.constructor===Object?(e.splice(e.length-1,1),n):{}}(e);return"("+(n.capture?"":"?:")+e.map((e=>d(e))).join("|")+")"}function f(e){return new RegExp(e.toString()+"|").exec("").length-1}const v=/\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;function m(e,{joinWith:n}){let t=0;return e.map((e=>{t+=1;const n=t;let a=d(e),o="";for(;a.length>0;){const e=v.exec(a);if(!e){o+=a;break}o+=a.substring(0,e.index),a=a.substring(e.index+e[0].length),"\\"===e[0][0]&&e[1]?o+="\\"+String(Number(e[1])+n):(o+=e[0],"("===e[0]&&t++)}return o})).map((e=>`(${e})`)).join(n)}const C="[a-zA-Z]\\w*",y="[a-zA-Z_]\\w*",x="\\b\\d+(\\.\\d+)?",w="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",E="\\b(0b[01]+)",k={begin:"\\\\[\\s\\S]",relevance:0},S={scope:"string",begin:"'",end:"'",illegal:"\\n",contains:[k]},j={scope:"string",begin:'"',end:'"',illegal:"\\n",contains:[k]},L=function(e,n,t={}){const a=l({scope:"comment",begin:e,end:n,contains:[]},t);a.contains.push({scope:"doctag",begin:"[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",end:/(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,excludeBegin:!0,relevance:0});const o=A("I","a","is","so","us","to","at","if","in","it","on",/[A-Za-z]+['](d|ve|re|ll|t|s|n)/,/[A-Za-z]+[-][a-z]+/,/[A-Za-z][a-z]{2,}/);return a.contains.push({begin:b(/[ ]+/,"(",o,/[.]?[:]?([.][ ]|[ ])/,"){3}")}),a},R=L("//","$"),M=L("/\\*","\\*/"),B=L("#","$"),O={scope:"number",begin:x,relevance:0},N={scope:"number",begin:w,relevance:0},T={scope:"number",begin:E,relevance:0},_={begin:/(?=\/[^/\n]*\/)/,contains:[{scope:"regexp",begin:/\//,end:/\/[gimuy]*/,illegal:/\n/,contains:[k,{begin:/\[/,end:/\]/,relevance:0,contains:[k]}]}]},I={scope:"title",begin:C,relevance:0},P={scope:"title",begin:y,relevance:0},H={begin:"\\.\\s*"+y,relevance:0};var D=Object.freeze({__proto__:null,MATCH_NOTHING_RE:/\b\B/,IDENT_RE:C,UNDERSCORE_IDENT_RE:y,NUMBER_RE:x,C_NUMBER_RE:w,BINARY_NUMBER_RE:E,RE_STARTERS_RE:"!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",SHEBANG:(e={})=>{const n=/^#![ ]*\//;return e.binary&&(e.begin=b(n,/.*\b/,e.binary,/\b.*/)),l({scope:"meta",begin:n,end:/$/,relevance:0,"on:begin":(e,n)=>{0!==e.index&&n.ignoreMatch()}},e)},BACKSLASH_ESCAPE:k,APOS_STRING_MODE:S,QUOTE_STRING_MODE:j,PHRASAL_WORDS_MODE:{begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},COMMENT:L,C_LINE_COMMENT_MODE:R,C_BLOCK_COMMENT_MODE:M,HASH_COMMENT_MODE:B,NUMBER_MODE:O,C_NUMBER_MODE:N,BINARY_NUMBER_MODE:T,REGEXP_MODE:_,TITLE_MODE:I,UNDERSCORE_TITLE_MODE:P,METHOD_GUARD:H,END_SAME_AS_BEGIN:function(e){return Object.assign(e,{"on:begin":(e,n)=>{n.data._beginMatch=e[1]},"on:end":(e,n)=>{n.data._beginMatch!==e[1]&&n.ignoreMatch()}})}});function z(e,n){"."===e.input[e.index-1]&&n.ignoreMatch()}function F(e,n){void 0!==e.className&&(e.scope=e.className,delete e.className)}function U(e,n){n&&e.beginKeywords&&(e.begin="\\b("+e.beginKeywords.split(" ").join("|")+")(?!\\.)(?=\\b|\\s)",e.__beforeBegin=z,e.keywords=e.keywords||e.beginKeywords,delete e.beginKeywords,void 0===e.relevance&&(e.relevance=0))}function G(e,n){Array.isArray(e.illegal)&&(e.illegal=A(...e.illegal))}function V(e,n){if(e.match){if(e.begin||e.end)throw new Error("begin & end are not supported with match");e.begin=e.match,delete e.match}}function $(e,n){void 0===e.relevance&&(e.relevance=1)}const q=(e,n)=>{if(!e.beforeMatch)return;if(e.starts)throw new Error("beforeMatch cannot be used with starts");const t=Object.assign({},e);Object.keys(e).forEach((n=>{delete e[n]})),e.keywords=t.keywords,e.begin=b(t.beforeMatch,p(t.begin)),e.starts={relevance:0,contains:[Object.assign(t,{endsParent:!0})]},e.relevance=0,delete t.beforeMatch},K=["of","and","for","in","not","or","if","then","parent","list","value"];function W(e,n,t="keyword"){const a=Object.create(null);return"string"==typeof e?o(t,e.split(" ")):Array.isArray(e)?o(t,e):Object.keys(e).forEach((function(t){Object.assign(a,W(e[t],n,t))})),a;function o(e,t){n&&(t=t.map((e=>e.toLowerCase()))),t.forEach((function(n){const t=n.split("|");a[t[0]]=[e,Q(t[0],t[1])]}))}}function Q(e,n){return n?Number(n):function(e){return K.includes(e.toLowerCase())}(e)?0:1}const J={},X=e=>{console.error(e)},Z=(e,...n)=>{console.log(`WARN: ${e}`,...n)},Y=(e,n)=>{J[`${e}/${n}`]||(console.log(`Deprecated as of ${e}. ${n}`),J[`${e}/${n}`]=!0)},ee=new Error;function ne(e,n,{key:t}){let a=0;const o=e[t],l={},i={};for(let e=1;e<=n.length;e++)i[e+a]=o[e],l[e+a]=!0,a+=f(n[e-1]);e[t]=i,e[t]._emit=l,e[t]._multi=!0}function te(e){!function(e){e.scope&&"object"==typeof e.scope&&null!==e.scope&&(e.beginScope=e.scope,delete e.scope)}(e),"string"==typeof e.beginScope&&(e.beginScope={_wrap:e.beginScope}),"string"==typeof e.endScope&&(e.endScope={_wrap:e.endScope}),function(e){if(Array.isArray(e.begin)){if(e.skip||e.excludeBegin||e.returnBegin)throw X("skip, excludeBegin, returnBegin not compatible with beginScope: {}"),ee;if("object"!=typeof e.beginScope||null===e.beginScope)throw X("beginScope must be object"),ee;ne(e,e.begin,{key:"beginScope"}),e.begin=m(e.begin,{joinWith:""})}}(e),function(e){if(Array.isArray(e.end)){if(e.skip||e.excludeEnd||e.returnEnd)throw X("skip, excludeEnd, returnEnd not compatible with endScope: {}"),ee;if("object"!=typeof e.endScope||null===e.endScope)throw X("endScope must be object"),ee;ne(e,e.end,{key:"endScope"}),e.end=m(e.end,{joinWith:""})}}(e)}function ae(e){function n(n,t){return new RegExp(d(n),"m"+(e.case_insensitive?"i":"")+(e.unicodeRegex?"u":"")+(t?"g":""))}class t{constructor(){this.matchIndexes={},this.regexes=[],this.matchAt=1,this.position=0}addRule(e,n){n.position=this.position++,this.matchIndexes[this.matchAt]=n,this.regexes.push([n,e]),this.matchAt+=f(e)+1}compile(){0===this.regexes.length&&(this.exec=()=>null);const e=this.regexes.map((e=>e[1]));this.matcherRe=n(m(e,{joinWith:"|"}),!0),this.lastIndex=0}exec(e){this.matcherRe.lastIndex=this.lastIndex;const n=this.matcherRe.exec(e);if(!n)return null;const t=n.findIndex(((e,n)=>n>0&&void 0!==e)),a=this.matchIndexes[t];return n.splice(0,t),Object.assign(n,a)}}class a{constructor(){this.rules=[],this.multiRegexes=[],this.count=0,this.lastIndex=0,this.regexIndex=0}getMatcher(e){if(this.multiRegexes[e])return this.multiRegexes[e];const n=new t;return this.rules.slice(e).forEach((([e,t])=>n.addRule(e,t))),n.compile(),this.multiRegexes[e]=n,n}resumingScanAtSamePosition(){return 0!==this.regexIndex}considerAll(){this.regexIndex=0}addRule(e,n){this.rules.push([e,n]),"begin"===n.type&&this.count++}exec(e){const n=this.getMatcher(this.regexIndex);n.lastIndex=this.lastIndex;let t=n.exec(e);if(this.resumingScanAtSamePosition())if(t&&t.index===this.lastIndex);else{const n=this.getMatcher(0);n.lastIndex=this.lastIndex+1,t=n.exec(e)}return t&&(this.regexIndex+=t.position+1,this.regexIndex===this.count&&this.considerAll()),t}}if(e.compilerExtensions||(e.compilerExtensions=[]),e.contains&&e.contains.includes("self"))throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");return e.classNameAliases=l(e.classNameAliases||{}),function t(o,i){const r=o;if(o.isCompiled)return r;[F,V,te,q].forEach((e=>e(o,i))),e.compilerExtensions.forEach((e=>e(o,i))),o.__beforeBegin=null,[U,G,$].forEach((e=>e(o,i))),o.isCompiled=!0;let s=null;return"object"==typeof o.keywords&&o.keywords.$pattern&&(o.keywords=Object.assign({},o.keywords),s=o.keywords.$pattern,delete o.keywords.$pattern),s=s||/\w+/,o.keywords&&(o.keywords=W(o.keywords,e.case_insensitive)),r.keywordPatternRe=n(s,!0),i&&(o.begin||(o.begin=/\B|\b/),r.beginRe=n(r.begin),o.end||o.endsWithParent||(o.end=/\B|\b/),o.end&&(r.endRe=n(r.end)),r.terminatorEnd=d(r.end)||"",o.endsWithParent&&i.terminatorEnd&&(r.terminatorEnd+=(o.end?"|":"")+i.terminatorEnd)),o.illegal&&(r.illegalRe=n(o.illegal)),o.contains||(o.contains=[]),o.contains=[].concat(...o.contains.map((function(e){return function(e){return e.variants&&!e.cachedVariants&&(e.cachedVariants=e.variants.map((function(n){return l(e,{variants:null},n)}))),e.cachedVariants?e.cachedVariants:oe(e)?l(e,{starts:e.starts?l(e.starts):null}):Object.isFrozen(e)?l(e):e}("self"===e?o:e)}))),o.contains.forEach((function(e){t(e,r)})),o.starts&&t(o.starts,i),r.matcher=function(e){const n=new a;return e.contains.forEach((e=>n.addRule(e.begin,{rule:e,type:"begin"}))),e.terminatorEnd&&n.addRule(e.terminatorEnd,{type:"end"}),e.illegal&&n.addRule(e.illegal,{type:"illegal"}),n}(r),r}(e)}function oe(e){return!!e&&(e.endsWithParent||oe(e.starts))}class le extends Error{constructor(e,n){super(e),this.name="HTMLInjectionError",this.html=n}}const ie=o,re=l,se=Symbol("nomatch");var ce=function(e){const t=Object.create(null),o=Object.create(null),l=[];let i=!0;const r="Could not find the language '{}', did you forget to load/include a language module?",s={disableAutodetect:!0,name:"Plain text",contains:[]};let c={ignoreUnescapedHTML:!1,throwUnescapedHTML:!1,noHighlightRe:/^(no-?highlight)$/i,languageDetectRe:/\blang(?:uage)?-([\w-]+)\b/i,classPrefix:"hljs-",cssSelector:"pre code",languages:null,__emitter:u};function d(e){return c.noHighlightRe.test(e)}function f(e,n,t){let a="",o="";"object"==typeof n?(a=e,t=n.ignoreIllegals,o=n.language):(Y("10.7.0","highlight(lang, code, ...args) has been deprecated."),Y("10.7.0","Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277"),o=e,a=n),void 0===t&&(t=!0);const l={code:a,language:o};S("before:highlight",l);const i=l.result?l.result:v(l.language,l.code,t);return i.code=l.code,S("after:highlight",i),i}function v(e,n,o,l){const s=Object.create(null);function u(){if(!k.keywords)return void j.addText(L);let e=0;k.keywordPatternRe.lastIndex=0;let n=k.keywordPatternRe.exec(L),t="";for(;n;){t+=L.substring(e,n.index);const o=y.case_insensitive?n[0].toLowerCase():n[0],l=(a=o,k.keywords[a]);if(l){const[e,a]=l;if(j.addText(t),t="",s[o]=(s[o]||0)+1,s[o]<=7&&(R+=a),e.startsWith("_"))t+=n[0];else{const t=y.classNameAliases[e]||e;j.addKeyword(n[0],t)}}else t+=n[0];e=k.keywordPatternRe.lastIndex,n=k.keywordPatternRe.exec(L)}var a;t+=L.substring(e),j.addText(t)}function d(){null!=k.subLanguage?function(){if(""===L)return;let e=null;if("string"==typeof k.subLanguage){if(!t[k.subLanguage])return void j.addText(L);e=v(k.subLanguage,L,!0,S[k.subLanguage]),S[k.subLanguage]=e._top}else e=m(L,k.subLanguage.length?k.subLanguage:null);k.relevance>0&&(R+=e.relevance),j.addSublanguage(e._emitter,e.language)}():u(),L=""}function p(e,n){let t=1;const a=n.length-1;for(;t<=a;){if(!e._emit[t]){t++;continue}const a=y.classNameAliases[e[t]]||e[t],o=n[t];a?j.addKeyword(o,a):(L=o,u(),L=""),t++}}function g(e,n){return e.scope&&"string"==typeof e.scope&&j.openNode(y.classNameAliases[e.scope]||e.scope),e.beginScope&&(e.beginScope._wrap?(j.addKeyword(L,y.classNameAliases[e.beginScope._wrap]||e.beginScope._wrap),L=""):e.beginScope._multi&&(p(e.beginScope,n),L="")),k=Object.create(e,{parent:{value:k}}),k}function h(e,n,t){let o=function(e,n){const t=e&&e.exec(n);return t&&0===t.index}(e.endRe,t);if(o){if(e["on:end"]){const t=new a(e);e["on:end"](n,t),t.isMatchIgnored&&(o=!1)}if(o){for(;e.endsParent&&e.parent;)e=e.parent;return e}}if(e.endsWithParent)return h(e.parent,n,t)}function b(e){return 0===k.matcher.regexIndex?(L+=e[0],1):(O=!0,0)}function A(e){const t=e[0],a=n.substring(e.index),o=h(k,e,a);if(!o)return se;const l=k;k.endScope&&k.endScope._wrap?(d(),j.addKeyword(t,k.endScope._wrap)):k.endScope&&k.endScope._multi?(d(),p(k.endScope,e)):l.skip?L+=t:(l.returnEnd||l.excludeEnd||(L+=t),d(),l.excludeEnd&&(L=t));do{k.scope&&j.closeNode(),k.skip||k.subLanguage||(R+=k.relevance),k=k.parent}while(k!==o.parent);return o.starts&&g(o.starts,e),l.returnEnd?0:t.length}let f={};function C(t,l){const r=l&&l[0];if(L+=t,null==r)return d(),0;if("begin"===f.type&&"end"===l.type&&f.index===l.index&&""===r){if(L+=n.slice(l.index,l.index+1),!i){const n=new Error(`0 width match regex (${e})`);throw n.languageName=e,n.badRule=f.rule,n}return 1}if(f=l,"begin"===l.type)return function(e){const n=e[0],t=e.rule,o=new a(t),l=[t.__beforeBegin,t["on:begin"]];for(const t of l)if(t&&(t(e,o),o.isMatchIgnored))return b(n);return t.skip?L+=n:(t.excludeBegin&&(L+=n),d(),t.returnBegin||t.excludeBegin||(L=n)),g(t,e),t.returnBegin?0:n.length}(l);if("illegal"===l.type&&!o){const e=new Error('Illegal lexeme "'+r+'" for mode "'+(k.scope||"<unnamed>")+'"');throw e.mode=k,e}if("end"===l.type){const e=A(l);if(e!==se)return e}if("illegal"===l.type&&""===r)return 1;if(B>1e5&&B>3*l.index)throw new Error("potential infinite loop, way more iterations than matches");return L+=r,r.length}const y=w(e);if(!y)throw X(r.replace("{}",e)),new Error('Unknown language: "'+e+'"');const x=ae(y);let E="",k=l||x;const S={},j=new c.__emitter(c);!function(){const e=[];for(let n=k;n!==y;n=n.parent)n.scope&&e.unshift(n.scope);e.forEach((e=>j.openNode(e)))}();let L="",R=0,M=0,B=0,O=!1;try{for(k.matcher.considerAll();;){B++,O?O=!1:k.matcher.considerAll(),k.matcher.lastIndex=M;const e=k.matcher.exec(n);if(!e)break;const t=C(n.substring(M,e.index),e);M=e.index+t}return C(n.substring(M)),j.closeAllNodes(),j.finalize(),E=j.toHTML(),{language:e,value:E,relevance:R,illegal:!1,_emitter:j,_top:k}}catch(t){if(t.message&&t.message.includes("Illegal"))return{language:e,value:ie(n),illegal:!0,relevance:0,_illegalBy:{message:t.message,index:M,context:n.slice(M-100,M+100),mode:t.mode,resultSoFar:E},_emitter:j};if(i)return{language:e,value:ie(n),illegal:!1,relevance:0,errorRaised:t,_emitter:j,_top:k};throw t}}function m(e,n){n=n||c.languages||Object.keys(t);const a=function(e){const n={value:ie(e),illegal:!1,relevance:0,_top:s,_emitter:new c.__emitter(c)};return n._emitter.addText(e),n}(e),o=n.filter(w).filter(k).map((n=>v(n,e,!1)));o.unshift(a);const l=o.sort(((e,n)=>{if(e.relevance!==n.relevance)return n.relevance-e.relevance;if(e.language&&n.language){if(w(e.language).supersetOf===n.language)return 1;if(w(n.language).supersetOf===e.language)return-1}return 0})),[i,r]=l,u=i;return u.secondBest=r,u}function C(e){let n=null;const t=function(e){let n=e.className+" ";n+=e.parentNode?e.parentNode.className:"";const t=c.languageDetectRe.exec(n);if(t){const n=w(t[1]);return n||(Z(r.replace("{}",t[1])),Z("Falling back to no-highlight mode for this block.",e)),n?t[1]:"no-highlight"}return n.split(/\s+/).find((e=>d(e)||w(e)))}(e);if(d(t))return;if(S("before:highlightElement",{el:e,language:t}),e.children.length>0&&(c.ignoreUnescapedHTML||(console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."),console.warn("https://github.com/highlightjs/highlight.js/wiki/security"),console.warn("The element with unescaped HTML:"),console.warn(e)),c.throwUnescapedHTML))throw new le("One of your code blocks includes unescaped HTML.",e.innerHTML);n=e;const a=n.textContent,l=t?f(a,{language:t,ignoreIllegals:!0}):m(a);e.innerHTML=l.value,function(e,n,t){const a=n&&o[n]||t;e.classList.add("hljs"),e.classList.add(`language-${a}`)}(e,t,l.language),e.result={language:l.language,re:l.relevance,relevance:l.relevance},l.secondBest&&(e.secondBest={language:l.secondBest.language,relevance:l.secondBest.relevance}),S("after:highlightElement",{el:e,result:l,text:a})}let y=!1;function x(){"loading"!==document.readyState?document.querySelectorAll(c.cssSelector).forEach(C):y=!0}function w(e){return e=(e||"").toLowerCase(),t[e]||t[o[e]]}function E(e,{languageName:n}){"string"==typeof e&&(e=[e]),e.forEach((e=>{o[e.toLowerCase()]=n}))}function k(e){const n=w(e);return n&&!n.disableAutodetect}function S(e,n){const t=e;l.forEach((function(e){e[t]&&e[t](n)}))}"undefined"!=typeof window&&window.addEventListener&&window.addEventListener("DOMContentLoaded",(function(){y&&x()}),!1),Object.assign(e,{highlight:f,highlightAuto:m,highlightAll:x,highlightElement:C,highlightBlock:function(e){return Y("10.7.0","highlightBlock will be removed entirely in v12.0"),Y("10.7.0","Please use highlightElement now."),C(e)},configure:function(e){c=re(c,e)},initHighlighting:()=>{x(),Y("10.6.0","initHighlighting() deprecated.  Use highlightAll() now.")},initHighlightingOnLoad:function(){x(),Y("10.6.0","initHighlightingOnLoad() deprecated.  Use highlightAll() now.")},registerLanguage:function(n,a){let o=null;try{o=a(e)}catch(e){if(X("Language definition for '{}' could not be registered.".replace("{}",n)),!i)throw e;X(e),o=s}o.name||(o.name=n),t[n]=o,o.rawDefinition=a.bind(null,e),o.aliases&&E(o.aliases,{languageName:n})},unregisterLanguage:function(e){delete t[e];for(const n of Object.keys(o))o[n]===e&&delete o[n]},listLanguages:function(){return Object.keys(t)},getLanguage:w,registerAliases:E,autoDetection:k,inherit:re,addPlugin:function(e){!function(e){e["before:highlightBlock"]&&!e["before:highlightElement"]&&(e["before:highlightElement"]=n=>{e["before:highlightBlock"](Object.assign({block:n.el},n))}),e["after:highlightBlock"]&&!e["after:highlightElement"]&&(e["after:highlightElement"]=n=>{e["after:highlightBlock"](Object.assign({block:n.el},n))})}(e),l.push(e)}}),e.debugMode=function(){i=!1},e.safeMode=function(){i=!0},e.versionString="11.7.0",e.regex={concat:b,lookahead:p,either:A,optional:h,anyNumberOfTimes:g};for(const e in D)"object"==typeof D[e]&&n.exports(D[e]);return Object.assign(e,D),e}({});e.exports=ce,ce.HighlightJS=ce,ce.default=ce}},n={};function t(a){var o=n[a];if(void 0!==o)return o.exports;var l=n[a]={id:a,exports:{}};return e[a](l,l.exports,t),l.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0;var a={};return(()=>{"use strict";t.d(a,{default:()=>x});var e=t(379),n=t.n(e),o=t(795),l=t.n(o),i=t(569),r=t.n(i),s=t(565),c=t.n(s),u=t(216),d=t.n(u),p=t(589),g=t.n(p),h=t(192),b={};function A(e,n,t){var a;if(!document)throw new Error("No document instance found!");var o=document.createElement(e);if(n&&(Array.isArray(n)?(a=o.classList).add.apply(a,n):o.classList.add(n)),t)for(var l=0,i=Object.keys(t);l<i.length;l++){var r=i[l];o.setAttribute(r,t[r])}return o}function f(e){for(var n=document.querySelectorAll(".editorjs-code-language-select .select-items"),t=document.querySelectorAll(".editorjs-code-language-select .select-selected"),a=[],o=0;o<t.length;++o)e===t[o]?a.push(o):t[o].classList.remove("select-arrow-active");for(o=0;o<n.length;++o)a.indexOf(o)&&n[o].classList.add("select-hide")}b.styleTagTransform=g(),b.setAttributes=c(),b.insert=r().bind(null,"head"),b.domAPI=l(),b.insertStyleElement=d(),n()(h.Z,b),h.Z&&h.Z.locals&&h.Z.locals,document.addEventListener("click",(function(){f()}));var v=function(e){return n=void 0,t=void 0,o=function(){var n,t,a;return function(e,n){var t,a,o,l,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return l={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function r(r){return function(s){return function(r){if(t)throw new TypeError("Generator is already executing.");for(;l&&(l=0,r[0]&&(i=0)),i;)try{if(t=1,a&&(o=2&r[0]?a.return:r[0]?a.throw||((o=a.return)&&o.call(a),0):a.next)&&!(o=o.call(a,r[1])).done)return o;switch(a=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return i.label++,{value:r[1],done:!1};case 5:i.label++,a=r[1],r=[0];continue;case 7:r=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){i=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){i.label=r[1];break}if(6===r[0]&&i.label<o[1]){i.label=o[1],o=r;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(r);break}o[2]&&i.ops.pop(),i.trys.pop();continue}r=n.call(e,i)}catch(e){r=[6,e],a=0}finally{t=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(o){switch(o.label){case 0:if(!document)throw new Error("Trying to access document from node environment");if(!navigator.clipboard){(n=document.createElement("textarea")).value=e,n.style.top="0",n.style.left="0",n.style.position="fixed",document.body.appendChild(n),n.focus(),n.select();try{return t=document.execCommand("copy"),a=t?"successful":"unsuccessful",console.log("Fallback: Copying text command was "+a),[2,t]}catch(e){console.error("Unable to copy",e)}return[2,!1]}return[4,navigator.clipboard.writeText(e).then((function(){return!0})).catch((function(e){return console.error("Async: unable to copy",e),!1}))];case 1:return[2,o.sent()]}}))},new((a=void 0)||(a=Promise))((function(e,l){function i(e){try{s(o.next(e))}catch(e){l(e)}}function r(e){try{s(o.throw(e))}catch(e){l(e)}}function s(n){var t;n.done?e(n.value):(t=n.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,r)}s((o=o.apply(n,t||[])).next())}));var n,t,a,o};const m=t(390);var C=[{label:"1C",value:"1c"},{label:"4D",value:"4d"},{label:"ABAP",value:"sap-abap"},{label:"ABNF",value:"abnf"},{label:"Access logs",value:"accesslog"},{label:"Ada",value:"ada"},{label:"Apex",value:"apex"},{label:"Arduino",value:"arduino"},{label:"ARM assembler",value:"armasm"},{label:"AVR assembler",value:"avrasm"},{label:"ActionScript",value:"actionscript"},{label:"Alan IF",value:"alan"},{label:"Alan",value:"ln"},{label:"AngelScript",value:"angelscript"},{label:"Apache",value:"apache"},{label:"AppleScript",value:"applescript"},{label:"Arcade",value:"arcade"},{label:"AsciiDoc",value:"asciidoc"},{label:"AspectJ",value:"aspectj"},{label:"AutoHotkey",value:"autohotkey"},{label:"AutoIt",value:"autoit"},{label:"Awk",value:"awk"},{label:"Bash",value:"bash"},{label:"Basic",value:"basic"},{label:"BBCode",value:"bbcode"},{label:"Blade (Laravel)",value:"blade"},{label:"BNF",value:"bnf"},{label:"Brainfuck",value:"brainfuck"},{label:"C#",value:"csharp"},{label:"C",value:"c"},{label:"C++",value:"cpp"},{label:"C/AL",value:"cal"},{label:"Cache Object Script",value:"cos"},{label:"CMake",value:"cmake"},{label:"COBOL",value:"cobol"},{label:"Coq",value:"coq"},{label:"CSP",value:"csp"},{label:"CSS",value:"css"},{label:"Cap’n Proto",value:"capnproto"},{label:"Chaos",value:"chaos"},{label:"Chapel",value:"chapel"},{label:"Cisco CLI",value:"cisco"},{label:"Clojure",value:"clojure"},{label:"CoffeeScript",value:"coffeescript"},{label:"CpcdosC+",value:"cpc"},{label:"Crmsh",value:"crmsh"},{label:"Crystal",value:"crystal"},{label:"cURL",value:"curl"},{label:"Cypher (Neo4j)",value:"cypher"},{label:"D",value:"d"},{label:"Dafny",value:"dafny"},{label:"Dart",value:"dart"},{label:"Delphi",value:"dpr"},{label:"Diff",value:"diff"},{label:"Django",value:"django"},{label:"DNS Zone file",value:"dns"},{label:"Dockerfile",value:"dockerfile"},{label:"DOS",value:"dos"},{label:"dsconfig",value:"dsconfig"},{label:"DTS (Device Tree)",value:"dts"},{label:"Dust",value:"dust"},{label:"Dylan",value:"dylan"},{label:"EBNF",value:"ebnf"},{label:"Elixir",value:"elixir"},{label:"Elm",value:"elm"},{label:"Erlang",value:"erlang"},{label:"Excel",value:"excel"},{label:"Extempore",value:"extempore"},{label:"F#",value:"fsharp"},{label:"FIX",value:"fix"},{label:"Flix",value:"flix"},{label:"Fortran",value:"fortran"},{label:"FunC",value:"func"},{label:"G-Code",value:"gcode"},{label:"Gams",value:"gams"},{label:"GAUSS",value:"gauss"},{label:"GDScript",value:"godot"},{label:"Gherkin",value:"gherkin"},{label:"Glimmer and EmberJS",value:"hbs"},{label:"GN for Ninja",value:"gn"},{label:"Go",value:"go"},{label:"Grammatical Framework",value:"gf"},{label:"Golo",value:"golo"},{label:"Gradle",value:"gradle"},{label:"GraphQL",value:"graphql"},{label:"Groovy",value:"groovy"},{label:"GSQL",value:"gsql"},{label:"HTML, XML",value:"xml"},{label:"HTTP",value:"http"},{label:"Haml",value:"haml"},{label:"Handlebars",value:"handlebars"},{label:"Haskell",value:"haskell"},{label:"Haxe",value:"haxe"},{label:"High-level shader language",value:"hlsl"},{label:"Hy",value:"hy"},{label:"Ini, TOML",value:"ini"},{label:"Inform7",value:"inform7"},{label:"IRPF90",value:"irpf90"},{label:"JSON",value:"json"},{label:"Java",value:"java"},{label:"JavaScript",value:"javascript"},{label:"Jolie",value:"jolie"},{label:"Julia",value:"julia"},{label:"Kotlin",value:"kotlin"},{label:"LaTeX",value:"tex"},{label:"Leaf",value:"leaf"},{label:"Lean",value:"lean"},{label:"Lasso",value:"lasso"},{label:"Less",value:"less"},{label:"LDIF",value:"ldif"},{label:"Lisp",value:"lisp"},{label:"LiveCode Server",value:"livecodeserver"},{label:"LiveScript",value:"livescript"},{label:"LookML",value:"lookml"},{label:"Lua",value:"lua"},{label:"Macaulay2",value:"macaulay2"},{label:"Makefile",value:"makefile"},{label:"Markdown",value:"markdown"},{label:"Mathematica",value:"mathematica"},{label:"Matlab",value:"matlab"},{label:"Maxima",value:"maxima"},{label:"Maya Embedded Language",value:"mel"},{label:"Mercury",value:"mercury"},{label:"mIRC Scripting Language",value:"mirc"},{label:"Mizar",value:"mizar"},{label:"MKB",value:"mkb"},{label:"MLIR",value:"mlir"},{label:"Mojolicious",value:"mojolicious"},{label:"Monkey",value:"monkey"},{label:"Moonscript",value:"moonscript"},{label:"N1QL",value:"n1ql"},{label:"NSIS",value:"nsis"},{label:"Never",value:"never"},{label:"Nginx",value:"nginx"},{label:"Nim",value:"nim"},{label:"Nix",value:"nix"},{label:"Oak",value:"oak"},{label:"Object Constraint Language",value:"ocl"},{label:"OCaml",value:"ocaml"},{label:"Objective C",value:"objectivec"},{label:"OpenGL Shading Language",value:"glsl"},{label:"OpenSCAD",value:"openscad"},{label:"Oracle Rules Language",value:"ruleslanguage"},{label:"Oxygene",value:"oxygene"},{label:"PF",value:"pf"},{label:"PHP",value:"php"},{label:"Papyrus",value:"papyrus"},{label:"Parser3",value:"parser3"},{label:"Perl",value:"perl"},{label:"Pine Script",value:"pine"},{label:"Plaintext",value:"plaintext"},{label:"Pony",value:"pony"},{label:"PostgreSQL & PL/pgSQL",value:"pgsql"},{label:"PowerShell",value:"powershell"},{label:"Processing",value:"processing"},{label:"Prolog",value:"prolog"},{label:"Properties",value:"properties"},{label:"Protocol Buffers",value:"protobuf"},{label:"Puppet",value:"puppet"},{label:"Python",value:"python"},{label:"Python profiler results",value:"profile"},{label:"Python REPL",value:"python-repl"},{label:"Q#",value:"qsharp"},{label:"Q",value:"k"},{label:"QML",value:"qml"},{label:"R",value:"r"},{label:"Razor CSHTML",value:"cshtml"},{label:"ReasonML",value:"reasonml"},{label:"Rebol & Red",value:"redbol"},{label:"RenderMan RIB",value:"rib"},{label:"RenderMan RSL",value:"rsl"},{label:"RiScript",value:"risc"},{label:"Roboconf",value:"graph"},{label:"Robot Framework",value:"robot"},{label:"RPM spec files",value:"rpm-specfile"},{label:"Ruby",value:"ruby"},{label:"Rust",value:"rust"},{label:"RVT Script",value:"rvt"},{label:"SAS",value:"SAS"},{label:"SCSS",value:"scss"},{label:"SQL",value:"sql"},{label:"STEP Part 21",value:"p21"},{label:"Scala",value:"scala"},{label:"Scheme",value:"scheme"},{label:"Scilab",value:"scilab"},{label:"Shape Expressions",value:"shexc"},{label:"Shell",value:"shell"},{label:"Smali",value:"smali"},{label:"Smalltalk",value:"smalltalk"},{label:"SML",value:"sml"},{label:"Solidity",value:"solidity"},{label:"Splunk SPL",value:"spl"},{label:"Stan",value:"stan"},{label:"Stata",value:"stata"},{label:"Structured Text",value:"iecst"},{label:"Stylus",value:"stylus"},{label:"SubUnit",value:"subunit"},{label:"Supercollider",value:"supercollider"},{label:"Svelte",value:"svelte"},{label:"Swift",value:"swift"},{label:"Tcl",value:"tcl"},{label:"Terraform (HCL)",value:"terraform"},{label:"Test Anything Protocol",value:"tap"},{label:"Thrift",value:"thrift"},{label:"Toit",value:"toit"},{label:"TP",value:"tp"},{label:"Transact-SQL",value:"tsql"},{label:"Twig",value:"twig"},{label:"TypeScript",value:"typescript"},{label:"Unicorn Rails log",value:"unicorn-rails-log"},{label:"VB.Net",value:"vbnet"},{label:"VBA",value:"vba"},{label:"VBScript",value:"vbscript"},{label:"VHDL",value:"vhdl"},{label:"Vala",value:"vala"},{label:"Verilog",value:"verilog"},{label:"Vim Script",value:"vim"},{label:"X#",value:"xsharp"},{label:"X++",value:"axapta"},{label:"x86 Assembly",value:"x86asm"},{label:"XL",value:"xl"},{label:"XQuery",value:"xquery"},{label:"YAML",value:"yml"},{label:"ZenScript",value:"zenscript"},{label:"Zephir",value:"zephir"}],y=function(){function e(e){var n=e.data,t=e.config,a=e.api,o=e.readOnly;if(this.inputRef=null,this.codeRef=null,this.containerRef=null,this.captionInputRef=null,this.supportedLanguages=[],this.currentSelectedLanguage="",this.copiedContent=!1,this.useCaption=!1,this.data=null,this.configs={allowValidation:!0},this.api=null,this.readOnly=!1,this.isDataValid(n)&&(this.data=n,this.currentSelectedLanguage=n.language),this.buildSupportedLanguages(t.supportedLanguages),t&&!o)if(this.configs=Object.assign(this.configs,t),t.defaultLanguage){if(-1===this.supportedLanguages.findIndex((function(e){return e.value===t.defaultLanguage})))throw new Error("The default language you provided is not existed in the given supported languages. More detail about supported languages from highlight.js: https://github.com/highlightjs/highlight.js/blob/main/SUPPORTED_LANGUAGES.md");this.currentSelectedLanguage=t.defaultLanguage}else this.currentSelectedLanguage=this.supportedLanguages[0].value;a&&(this.api=a),this.readOnly=Boolean(o)}return Object.defineProperty(e,"isReadOnlySupported",{get:function(){return!0},enumerable:!1,configurable:!0}),Object.defineProperty(e,"toolbox",{get:function(){return{title:"Code",icon:'<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 640 512">\x3c!--! Font Awesome Pro 6.2.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --\x3e<path d="M392.8 1.2c-17-4.9-34.7 5-39.6 22l-128 448c-4.9 17 5 34.7 22 39.6s34.7-5 39.6-22l128-448c4.9-17-5-34.7-22-39.6zm80.6 120.1c-12.5 12.5-12.5 32.8 0 45.3L562.7 256l-89.4 89.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l112-112c12.5-12.5 12.5-32.8 0-45.3l-112-112c-12.5-12.5-32.8-12.5-45.3 0zm-306.7 0c-12.5-12.5-32.8-12.5-45.3 0l-112 112c-12.5 12.5-12.5 32.8 0 45.3l112 112c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256l89.4-89.4c12.5-12.5 12.5-32.8 0-45.3z"/></svg>'}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"allowValidation",{get:function(){return this.configs.allowValidation},enumerable:!1,configurable:!0}),e.prototype.isDataValid=function(e){return"object"==typeof e&&"language"in e&&"code"in e&&"caption"in e&&"string"==typeof e.language&&"string"==typeof e.caption&&"string"==typeof e.code},e.prototype.buildSupportedLanguages=function(e){for(var n,t=Boolean(e),a=function(a){m.getLanguage(a.value)&&(n=t&&null!=(n=e.find((function(e){return e.value===a.value})))?n:a,o.supportedLanguages.push(n))},o=this,l=0,i=C;l<i.length;l++)a(i[l])},e.prototype.render=function(){var e=this,n=A("div","editorjs-code-block"),t=A("div","control-container");if(this.readOnly){var a=A("span","language"),o=this.supportedLanguages.find((function(n){return n.value===e.currentSelectedLanguage}));a.innerHTML=o?o.label:"",t.appendChild(a)}else{var l=function(e,n){if(0!==e.length){var t,a,o,l,i,r,s,c,u,d,p,g=["editorjs-code-language-select"],h={};n&&(n.classNames&&(Array.isArray(n.classNames)?g.push.apply(g,n.classNames):g.push(n.classNames)),n.attributes&&(h=Object.assign(h,n.attributes)));var b=function(e,t){if(!u||!a||!l)throw new Error("Element not found");if(!t){a.replaceChildren(),u.replaceChildren();for(var r=0,s=e;r<s.length;r++){var c=s[r];(o=A("option")).value=c.value,o.innerText=c.label,a.appendChild(o)}}for(var g=0;g<e.length;++g)(d=A("div",void 0,{"data-value":e[g].value})).innerHTML=a.options[g].innerHTML,e[g].value===p?d.setAttribute("class","same-as-selected"):d.removeAttribute("class"),d.addEventListener("click",(function(e){var t=e.target,a=t.dataset.value;p=a,l.innerHTML=t.innerHTML,l.appendChild(i);for(var o=u.getElementsByClassName("same-as-selected"),r=0;r<o.length;++r)o[r].removeAttribute("class");t.setAttribute("class","same-as-selected"),l.click(),n&&n.onSelect&&n.onSelect(a)})),u.appendChild(d)};t=A("div",g,h),a=A("select");for(var v=0,m=e;v<m.length;v++){var C=m[v];(o=A("option")).value=C.value,o.innerText=C.label,a.appendChild(o)}return(l=A("div","select-selected")).innerHTML=n&&n.defaultOption?e.find((function(e){return e.value===n.defaultOption})).label:e[0].label,(i=document.createElementNS("http://www.w3.org/2000/svg","svg")).setAttribute("viewBox","0 0 448 512"),i.classList.add("arrow-icon"),(r=document.createElementNS("http://www.w3.org/2000/svg","path")).setAttribute("d","M201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z"),i.appendChild(r),l.appendChild(i),t.appendChild(l),s=A("div",["select-items","select-hide"]),(c=A("input","search-input",{placeholder:"Search"})).onclick=function(e){e.stopPropagation()},c.oninput=function(n){var t=n.target.value,a=""!==t.trim()?e.filter((function(e){return e.label.toLowerCase().includes(t.toLowerCase())})):e;b(a),n.stopPropagation()},s.appendChild(c),u=A("div","items-list"),p=n&&n.defaultOption?n.defaultOption:e[0].value,b(e,!0),s.appendChild(u),t.appendChild(s),l.addEventListener("click",(function(n){var t=n.target;f(l),n.stopPropagation(),s.classList.toggle("select-hide"),t.classList.toggle("select-arrow-active"),""!==c.value.trim()&&b(e),c.value=""})),t}}(this.supportedLanguages,{defaultOption:this.currentSelectedLanguage,onSelect:this.onSelectLanguage.bind(this)});t.appendChild(l)}var i=A("div","btn-div"),r=A("button",["control-btn","copy-btn"]);this.readOnly&&r.classList.add("copy-btn-only");var s=this.api?this.api.i18n.t("Copy"):"Copy";if(r.innerHTML='\n    <svg class="copy-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\x3c!--! Font Awesome Pro 6.2.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --\x3e<path d="M0 448c0 35.3 28.7 64 64 64H288c35.3 0 64-28.7 64-64V384H224c-53 0-96-43-96-96V160H64c-35.3 0-64 28.7-64 64V448zm224-96H448c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H224c-35.3 0-64 28.7-64 64V288c0 35.3 28.7 64 64 64z"/></svg>\n    '.concat(s,"\n    "),r.onclick=this.onCopyContent.bind(this),i.appendChild(r),!this.readOnly){var c=A("button",["control-btn","caption-btn"]);c.innerText=this.api?this.api.i18n.t("Caption"):"Caption",c.onclick=this.onAddCaption.bind(this),i.appendChild(c)}t.appendChild(i),n.appendChild(t);var u=A("div","content-container"),d=A("div","rendered-layer"),p=A("pre",void 0,{"aria-hidden":"true"}),g=A("code","language-".concat(this.currentSelectedLanguage));p.appendChild(g),d.appendChild(p);var h=A("textarea","input-layer",{placeholder:this.api?this.api.i18n.t("Enter your code"):"Enter your code"});return h.disabled=this.readOnly,h.spellcheck=!1,u.appendChild(d),u.appendChild(h),n.appendChild(u),this.inputRef=h,this.codeRef=g,this.containerRef=n,this.data&&(this.inputRef.value=this.data.code,setTimeout((function(){e.updateContent(e.data.code)}),500),this.data.caption&&""!==this.data.caption.trim()&&this.addCaption(this.data.caption)),this.inputRef.oninput=this.onContentUpdated.bind(this),this.inputRef.onkeydown=this.onInputAreaKeyDown.bind(this),n},e.prototype.save=function(){if(!this.inputRef||!this.captionInputRef)throw new Error("No ref found! You may forgot to call render()");return{language:this.currentSelectedLanguage,code:this.inputRef.value,caption:this.captionInputRef.value}},e.prototype.validate=function(e){return!this.allowValidation||""!==e.code.trim()},e.prototype.onContentUpdated=function(e){var n=e.target.value;this.updateContent(n)},e.prototype.onInputAreaKeyDown=function(e){if("Enter"===e.key)e.stopPropagation();else if("Tab"===e.key){e.preventDefault();var n=e.target,t=n.value,a=t.slice(0,n.selectionStart),o=t.slice(n.selectionEnd,t.length),l=n.selectionEnd+1;n.value=a+"\t"+o,n.selectionStart=l,n.selectionEnd=l,this.updateContent(n.value),e.stopPropagation()}},e.prototype.onSelectLanguage=function(e){if(!this.codeRef||!this.inputRef)throw new Error("No ref found! You may forgot to call render()");this.codeRef.classList.replace("language-".concat(this.currentSelectedLanguage),"language-".concat(e)),this.currentSelectedLanguage=e,this.updateContent(this.inputRef.value)},e.prototype.onCopyContent=function(e){return n=this,t=void 0,o=function(){var n,t,a=this;return function(e,n){var t,a,o,l,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return l={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function r(r){return function(s){return function(r){if(t)throw new TypeError("Generator is already executing.");for(;l&&(l=0,r[0]&&(i=0)),i;)try{if(t=1,a&&(o=2&r[0]?a.return:r[0]?a.throw||((o=a.return)&&o.call(a),0):a.next)&&!(o=o.call(a,r[1])).done)return o;switch(a=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return i.label++,{value:r[1],done:!1};case 5:i.label++,a=r[1],r=[0];continue;case 7:r=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){i=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){i.label=r[1];break}if(6===r[0]&&i.label<o[1]){i.label=o[1],o=r;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(r);break}o[2]&&i.ops.pop(),i.trys.pop();continue}r=n.call(e,i)}catch(e){r=[6,e],a=0}finally{t=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(o){switch(o.label){case 0:if(!this.inputRef)throw new Error("No ref found! You may forgot to call render()");return n=e.target,t=this.inputRef.value,[4,v(t)];case 1:return o.sent()&&(n.innerHTML='\n        <svg class="copy-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\x3c!--! Font Awesome Pro 6.2.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --\x3e<path d="M470.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L192 338.7 425.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/></svg>\n        '.concat(this.api?this.api.i18n.t("Copied"):"Copied","\n        "),this.copiedContent||(setTimeout((function(){n.innerHTML='\n                <svg class="copy-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\x3c!--! Font Awesome Pro 6.2.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --\x3e<path d="M0 448c0 35.3 28.7 64 64 64H288c35.3 0 64-28.7 64-64V384H224c-53 0-96-43-96-96V160H64c-35.3 0-64 28.7-64 64V448zm224-96H448c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H224c-35.3 0-64 28.7-64 64V288c0 35.3 28.7 64 64 64z"/></svg>\n                '.concat(a.api?a.api.i18n.t("Copy"):"Copy","\n                "),a.copiedContent=!1}),1e3),this.copiedContent=!0,this.configs.onContentCopied&&"function"==typeof this.configs.onContentCopied&&this.configs.onContentCopied(t))),[2]}}))},new((a=void 0)||(a=Promise))((function(e,l){function i(e){try{s(o.next(e))}catch(e){l(e)}}function r(e){try{s(o.throw(e))}catch(e){l(e)}}function s(n){var t;n.done?e(n.value):(t=n.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,r)}s((o=o.apply(n,t||[])).next())}));var n,t,a,o},e.prototype.onAddCaption=function(){if(!this.containerRef)throw new Error("No ref found! You may forgot to call render()");this.addCaption()},e.prototype.onCaptionKeyDown=function(e){if(!this.captionInputRef)throw new Error("No ref found!");"Backspace"===e.key&&""===e.target.value&&(this.containerRef.removeChild(this.captionInputRef),this.useCaption=!1)},e.prototype.addCaption=function(e){if(void 0===e&&(e=""),!this.useCaption){var n=A("textarea","caption-input",{placeholder:this.api?this.api.i18n.t("Write your caption"):"Write your caption"});n.disabled=this.readOnly,n.onkeydown=this.onCaptionKeyDown.bind(this),this.containerRef.appendChild(n),this.captionInputRef=n,n.focus(),this.useCaption=!0}this.captionInputRef.value=e},e.prototype.updateContent=function(e){if(!this.codeRef||!this.inputRef)throw new Error("No reference found! You may forgot to call render()");"\n"==e[e.length-1]&&(e+=" "),this.codeRef.innerHTML=e.replace(new RegExp("&","g"),"&amp;").replace(new RegExp("<","g"),"&lt;"),m.highlightElement(this.codeRef),this.inputRef.style.height="5px",this.inputRef.style.height=this.inputRef.scrollHeight+"px"},e}();const x=y})(),a.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,